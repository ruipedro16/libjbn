/*
   GENERIC CODE (parametric on the number of limbs)

   EXPECTS: "param int NLIMBS=??"

*/

require "bn_generic.jinc"

/* exported version
 remark: really like to have support for [reg ptr] in
 exported functions :-)...
*/

export fn bn_eq(reg ptr u64[NLIMBS] a b) -> reg u64
{
  reg u64 r;
  r = _bn_eq_(a, b);
  return r;
}

export fn bn_test0(reg ptr u64[NLIMBS] a) -> reg u64
{
  reg u64 r;
  r = __bn_test0(a);
  return r;
}

export fn bn_copy(reg ptr u64[NLIMBS] r a) -> reg ptr u64[NLIMBS]
{
  r = #copy(a);
  return r;
}

export fn bn_set0(reg ptr u64[NLIMBS] r) -> reg ptr u64[NLIMBS]
{
  inline int i;

  for i = 0 to NLIMBS {
    r[i] = 0;
  }

  return r;
}

export fn bn_addn(reg ptr u64[NLIMBS] r a b) -> reg ptr u64[NLIMBS]
{
  r = #copy(a);
  _, r = __bn_addc(r, b);
  return r;
}

export fn bn_subn(reg ptr u64[NLIMBS] r a b) -> reg ptr u64[NLIMBS]
{
  r = #copy(a);
 _, r = __bn_subc(r, b);
 return r;
}

export fn bn_muln(
  reg ptr u64[2*NLIMBS] r,
  reg ptr u64[NLIMBS] a b
) -> reg ptr u64[2*NLIMBS]
{
  b = b;
  r = __bn_muln(a, b, r);
  return r;
}

export fn bn_sqrn(
  reg ptr u64[2*NLIMBS] r,
  reg ptr u64[NLIMBS] a
) -> reg ptr u64[2*NLIMBS]
{
  r = __bn_sqrn(a, r);
  return r;
}

